import { Rule, Tree, SchematicContext, SchematicsException } from '@angular-devkit/schematics'
import {
    JsonAstObject,
    JsonParseMode,
    parseJsonAst,
    JsonAstNode
} from '@angular-devkit/core'

import { NodeDependencyType, NodeDependency, pkgJson, DeleteNodeDependency } from './types'

export function removeFiles(): Rule {
    return (tree: Tree, context: SchematicContext) => {
        if (!tree.exists('./angular.json')) {
            return tree
        }

        const angularJsonValue = getAngularJsonValue(tree)
        const { projects } = angularJsonValue

        // clean up projects generated by cli with versions <= 7
        Object.keys(projects)
            .filter((name) => name.endsWith('-e2e'))
            .forEach((projectName) => {
                const projectRoot = projects[projectName].root
                deleteDirectory(tree, projectRoot)
                context.logger.debug(`Removing ${projectName} from angular.json projects`)
                delete angularJsonValue.projects[projectName]
            })

        // clean up projects generated by cli with versions > 7
        Object.keys(projects)
            .filter((name) => !name.endsWith('-e2e'))
            .forEach((projectName) => {
                const projectRoot = projects[projectName].root
                deleteDirectory(tree, `${projectRoot}/e2e`)
            })

        return tree.overwrite(
            './angular.json',
            JSON.stringify(angularJsonValue, null, 2)
        )
    }
}

function parseJsonAtPath(tree: Tree, path: string): JsonAstObject {
    const buffer = tree.read(path)

    if (buffer === null) {
      throw new SchematicsException(`Could not read ${path}.`)
    }

    const content = buffer.toString()

    const json = parseJsonAst(content, JsonParseMode.Strict)
    if (json.kind != 'object') {
      throw new SchematicsException(`Invalid ${path}. Was expecting an object`)
    }

    return json
}

function getAngularJsonValue(tree: Tree) {
    const angularJsonAst = parseJsonAtPath(tree, './angular.json');
    return angularJsonAst.value as any;
}

export function getAngularVersion(tree: Tree): number {
    const packageNode = getPackageJsonDependency(tree, '@angular/core');

    const version = packageNode && packageNode.version.split('').find((char) => !!parseInt(char, 10));

    return version ? +version : 0;
}

function deleteDirectory(tree: Tree, path: string): void {
    try {
        tree.delete(path);
    } catch {}
}

function findPropertyInAstObject(
    node: JsonAstObject,
    propertyName: string
): JsonAstNode | null {
    let maybeNode: JsonAstNode | null = null;
    for (const property of node.properties) {
        if (property.key.value == propertyName) {
            maybeNode = property.value;
        }
    }

    return maybeNode;
}

function getPackageJsonDependency(tree: Tree, name: string): NodeDependency | null {
    const packageJson = parseJsonAtPath(tree, pkgJson.Path)
    let dep: NodeDependency | null = null;

    [
        NodeDependencyType.Default,
        NodeDependencyType.Dev,
        NodeDependencyType.Optional,
        NodeDependencyType.Peer
    ].forEach((depType) => {
        if (dep !== null) {
            return
        }

        const depsNode = findPropertyInAstObject(packageJson, depType)
        if (depsNode !== null && depsNode.kind === 'object') {
            const depNode = findPropertyInAstObject(depsNode, name)
            if (depNode !== null && depNode.kind === 'string') {
                const version = depNode.value
                dep = {
                    type: depType,
                    name: name,
                    version: version
                }
            }
        }
    })

    return dep
}

export function removePackageJsonDependency(tree: Tree, dependency: DeleteNodeDependency): void {
    const packageJsonAst = parseJsonAtPath(tree, pkgJson.Path)
    const depsNode = findPropertyInAstObject(packageJsonAst, dependency.type)
    const recorder = tree.beginUpdate(pkgJson.Path)

    if (!depsNode) {
        // Haven't found the dependencies key.
        new SchematicsException('Could not find the package.json dependency')
        return tree.commitUpdate(recorder)
    }

    if (depsNode.kind === 'object') {
        const fullPackageString = depsNode.text
            .split('\n')
            .filter((pkg) => pkg.includes(`"${dependency.name}"`))[0]

        const commaDangle = (
            fullPackageString &&
            fullPackageString.trim().slice(-1) === ',' ? 1 : 0
        )

        const packageAst = depsNode.properties.find((node) => (
            node.key.value.toLowerCase() === dependency.name.toLowerCase()
        ))

        // TODO: does this work for the last dependency?
        const newLineIndentation = 5

        if (packageAst) {
            // Package found, remove it.
            const end = packageAst.end.offset + commaDangle

            recorder.remove(
                packageAst.key.start.offset,
                end - packageAst.start.offset + newLineIndentation
            )
        }

        return tree.commitUpdate(recorder)
    }
}
